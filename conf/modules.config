/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'BWA_INDEX' {
        ext.when = { !params.bwa }
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        ext.when = { !params.fasta_fai }
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'SAMTOOLS_DICT' {
        ext.when = { !params.dict }
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/genome" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }

    withName: 'FASTQC' {
        cpus   = { 4    * task.attempt }
        memory = { 4.GB * task.attempt }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*{html,zip}"
        ]
    }

    withName: 'FASTQTOBAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqtobam/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.unmapped.bam'
        ]
    }

    withName: 'ALIGN_RAW_BAM' {
        publishDir = [
            path: { "${params.outdir}/preprocessing/align_raw_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.mapped.{bam,bam.bai}'
        ]
    }

    withName: 'MERGE_BAM' {
        ext.args = '--template-coordinate'
        publishDir = [
            path: { "${params.outdir}/preprocessing/merged/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.bam'
        ]
    }

    withName: 'GROUPREADSBYUMI' {
        publishDir = [
            [
                path: { "${params.outdir}/grouping/groupreadsbyumi/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.grouped.bam'
            ],
            [
                path: { "${params.outdir}/grouping/groupreadsbyumi/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.grouped-family-sizes.txt'
            ]
        ]
    }

    if (params.duplex_seq) {
        withName: 'COLLECTDUPLEXSEQMETRICS' {
            publishDir = [
                path: { "${params.outdir}/metrics/duplex_seq/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*duplex_seq_metrics*.{txt, pdf}'
            ]
        }
    }

    withName: 'CALLDDUPLEXCONSENSUSREADS|CALLMOLECULARCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/consensus_calling/called/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.cons.unmapped.bam'
        ]
    }

    withName: 'CALLANDFILTERDUPLEXCONSENSUSREADS|CALLANDFILTERMOLECULARCONSENSUSREADS|FILTERCONSENSUSREADS' {
        publishDir = [
            path: { "${params.outdir}/consensus_filtering/filtered/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.cons.filtered.{bam,bam.bai}'
        ]
    }

    withName:'FILTERCONSENSUSREADS' {
        memory = { 12.GB * task.attempt }
    }

    withName: 'ALIGN_CONSENSUS_BAM' {
        publishDir = [
            path: { "${params.outdir}/filtering/align_consensus_bam/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: '*.mapped.{bam,bam.bai}'
        ]
    }

    withName: 'MULTIQC' {
        cpus   = { 4     * task.attempt }
        memory = { 12.GB * task.attempt }
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
